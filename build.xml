<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="xrechnung-testsuite" default="compile">

  <property name="dist.dir" location="${basedir}/dist" />
  <property name="lib.dir" location="${basedir}/lib" />
  <property name="src.dir" location="${basedir}/src" />
  <property name="instance.dir" location="${basedir}/instances" />
  <property name="build.dir" location="${basedir}/build" />
  <property name="download.dir" location="${build.dir}/download" />

  <!-- the source of test instances -->
  <property name="test.src.dir" location="${src.dir}/test" />
  <property name="test.src.technical.dir"
    location="${test.src.dir}/technical-cases" />
  <property name="test.src.business.dir"
    location="${test.src.dir}/business-cases" />
  <!-- test instances in the build directory-->
  <property name="test.build.dir" location="${build.dir}/instances" />
  <property name="test.build.technical.dir"
    location="${test.build.dir}/technical-cases" />
  <property name="test.build.business.dir"
    location="${test.build.dir}/business-cases" />
  <property name="test.build.business.standard.dir"
    location="${test.build.business.dir}/standard" />
  <property name="test.build.business.extension.dir"
    location="${test.build.business.dir}/extension" />
  <property name="test.build.generated.dir"
    location="${test.build.dir}/generated" />
  <property name="reports.dir" location="${build.dir}/reports" />

  <!-- Version props -->
  <property name="testsuite.version.major.minor" value="2.0" />
  <property name="testsuite.version.patch" value="0" />

  <property name="testsuite.version"
    value="${testsuite.version.major.minor}.${testsuite.version.patch}" />
  <property name="testsuite.version.full" value="2020-07-31-SNAPSHOT" />

  <property name="xrechnung.version.full" value="2.0.0" />

  <property name="validator.jar" value="validationtool-1.0.1-standalone.jar" />

  <property name="validator.configuration.version.full" value="2019-12-30" />

  <property name="validator.configuration.download.url.prefix"
    value="https://github.com/itplr-kosit/validator-configuration-xrechnung/releases/download" />
  <property name="validator.configuration.release.version"
    value="release-${validator.configuration.version.full}" />
  <property name="validator.configuration.zip"
    value="validator-configuration-xrechnung_${xrechnung.version.full}_${validator.configuration.version.full}.zip" />
  <property name="validator.repository.dir" location="${build.dir}/repository" />

  <property name="xmute.version.full" value="0.5" />


  <property name="dist.name"
    value="xrechnung-${xrechnung.version.full}-testsuite-${testsuite.version.full}" />

  <target name="init"
    description="Initializes build directory structure and ISO timestamp">
    <!-- Create timestamps -->
    <tstamp>
      <format property="build.date" pattern="yyyy-MM-dd" />
    </tstamp>

    <echo>Build date: ${build.date}</echo>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${test.build.technical.dir}" />
    <mkdir dir="${test.build.business.dir}" />
    <mkdir dir="${test.build.generated.dir}" />
    <mkdir dir="${download.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${validator.repository.dir}" />
    <mkdir dir="${reports.dir}" />
  </target>


  <target name="prepare-validator" depends="init"
    description="Download KoSIT validator and add jar to library directory">
    <get
      src="https://github.com/itplr-kosit/validator/releases/download/validationtool-1_0_1/validationtool-dist-1.0.1-standalone.zip"
      dest="${download.dir}" verbose="true" skipexisting="true"
      usetimestamp="true" />
    <!-- Cause unzip task does not error on missing dest directory -->

    <fail message="Lib directory ${lib.dir} does not exist!">
      <condition>
        <not>
          <available file="${lib.dir}" />
        </not>
      </condition>
    </fail>

    <fail unless="validator.jar"
      message="Need to specify property with name 'validator.jar'" />
    <unzip src="${download.dir}/validationtool-dist-1.0.1-standalone.zip"
      dest="${lib.dir}">
      <patternset>
        <include name="**/${validator.jar}" />
      </patternset>
      <flattenmapper />
    </unzip>
  </target>


  <target name="retrieve-validator-configuration-from-local-build"
    description="Download and unzip validator configuration xrechnung"
    depends="init" if="develop.local.validator.configuration">
    <get
      src="${validator.configuration.download.url.prefix}/${validator.configuration.release.version}/${validator.configuration.zip}"
      dest="${download.dir}" verbose="true" skipexisting="true"
      usetimestamp="true" />
    <unzip src="${download.dir}/${validator.configuration.zip}"
      dest="${validator.repository.dir}" />
  </target>


  <target name="provide-validator-configuration"
    depends="retrieve-validator-configuration-from-local-build"
    if="develop.local.validator.configuration" />



  <target name="compile" depends="init"
    description="Compiling test instances from sources">
    <!-- Currently we just copy, but later we will transform etc. before testing -->
    <copy todir="${test.build.dir}">
      <fileset dir="${test.src.dir}" />
    </copy>
  </target>

  <target name="validator-standard-business-case-test"
    depends="compile, provide-validator-configuration"
    description="Testsuite business case validation"
    if="develop.local.validator.configuration">
    <echo>Creating validation reports for standard business cases ...</echo>
    <java jar="${lib.dir}/${validator.jar}" failonerror="yes" fork="yes"
      dir="${basedir}">
      <arg value="-s" />
      <arg value="${validator.repository.dir}/scenarios.xml" />

      <arg value="-r" />
      <arg value="${validator.repository.dir}" />
      <arg value="-h" />
      <arg value="-o" />
      <arg value="${reports.dir}" />
      <arg value="${test.build.business.standard.dir}" />
    </java>
  </target>

  <target name="validator-extension-business-case-test"
    depends="compile, provide-validator-configuration"
    description="Testsuite business case validation"
    if="develop.local.validator.configuration">
    <echo>Creating validation reports for extension business cases ...</echo>
    <java jar="${lib.dir}/${validator.jar}" failonerror="yes" fork="yes"
      dir="${basedir}">
      <arg value="-s" />
      <arg value="${validator.repository.dir}/scenarios.xml" />

      <arg value="-r" />
      <arg value="${validator.repository.dir}" />
      <arg value="-h" />
      <arg value="-o" />
      <arg value="${reports.dir}" />
      <arg value="${test.build.business.extension.dir}" />
    </java>
  </target>

  <target name="validator-technical-test"
    depends="compile, provide-validator-configuration"
    description="Testsuite technical validation with Validator XRechnung Configuration"
    if="develop.local.validator.configuration">
    <echo>Creating validation reports for technical cases ...</echo>
    <java jar="${lib.dir}/${validator.jar}" failonerror="yes" fork="yes"
      dir="${basedir}">
      <arg value="-s" />
      <arg value="${validator.repository.dir}/scenarios.xml" />

      <arg value="-r" />
      <arg value="${validator.repository.dir}" />
      <arg value="-h" />
      <arg value="-o" />
      <arg value="${reports.dir}" />
      <arg value="${test.build.technical.dir}" />
    </java>
  </target>

  <target name="validator-test"
    depends="validator-extension-business-case-test,validator-technical-test,validator-standard-business-case-test" >

<fail unless="develop.local.validator.configuration" message="Property 'develop.local.validator.configuration' has to be set in order to execute"></fail>
</target>

  <target name="retrieve-xmute" depends="init" if="xmute.download.url.prefix">
    <fail unless="xmute.download.url.prefix"
      message="Property xmute.download.url.prefix must exist for this target to work" />
    <get src="${xmute.download.url.prefix}/xml-mutate-${xmute.version.full}.jar"
      dest="${lib.dir}/${xmute.jar}" verbose="true" skipexisting="false"
      usetimestamp="true" />
  </target>

  <propertyset id="proxy.properties">
    <!--  	Select the properties whose name starts with the given string. -->
    <propertyref prefix="java.net.useSystemProxies" />
    <propertyref prefix="http." />
    <propertyref prefix="https." />
  </propertyset>

  <target name="mutate"
    depends="compile,retrieve-xmute, provide-validator-configuration"
    description="Unit TestSchematron Rules wit XML-Mutate"
    if="xmute.download.url.prefix">
    <echo>Testing Schematron rules ...</echo>
    <java jar="${lib.dir}/${xmute.jar}" failonerror="true" fork="true"
      dir="${basedir}">
      <!-- Proxy required by genericode mutator -->
      <syspropertyset refid="proxy.properties" />

      <arg value="--schematron" />
      <arg
        value="cenubl=${validator.repository.dir}/resources/ubl/2.1/xsl/EN16931-UBL-validation.xsl" />
      <!-- cencii:  for CEN UN/CEFACT CII rules
xrinv: Â´ for XRechnung UBL Invoice
xrcn:    for XRechnung UBL Credit Note
xrcii:   for XRechnung UN/CEFACT CII-->
      <arg value="--target ${test.build.generated.dir}" />
      <arg value="${test.build.technical.dir}" />
    </java>
  </target>


  <target name="test" depends="compile,mutate"
    description="Perform all tests">
    <echo message="Executing all tests" />
  </target>

  <target name="dist-only" depends="compile">
    <zip destfile="${dist.dir}/${dist.name}.zip">
      <fileset dir="${basedir}">
        <include name="testsuite.xml" />
      </fileset>
  
      <zipfileset dir="${test.build.dir}" prefix="instances"/>

      <fileset dir="${basedir}">
        <include name="README.md" />
        <include name="CHANGELOG.md" />
      </fileset>
    </zip>
  </target>

  <target name="dist" depends="test, dist-only"
    description="Create distribution zip for release">
    
  </target>


  <target name="clean">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}" verbose="true" includeEmptyDirs="true" />
    <delete dir="${dist.dir}" />
  </target>
</project>
